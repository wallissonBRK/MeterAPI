// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace MeterAPI.Models;

public partial class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Client> Clients { get; set; }

    public virtual DbSet<DailyReading> DailyReadings { get; set; }

    public virtual DbSet<Meter> Meters { get; set; }

    public virtual DbSet<MeterEvent> MeterEvents { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_general_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<Client>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("client");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Address)
                .HasMaxLength(200)
                .HasColumnName("address");
            entity.Property(e => e.Document)
                .HasMaxLength(20)
                .HasColumnName("document");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .HasColumnName("phone");
        });

        modelBuilder.Entity<DailyReading>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("daily_reading");

            entity.HasIndex(e => e.MeterId, "meter_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActiveEnergyDirectIntermediate)
                .HasPrecision(10, 2)
                .HasColumnName("active_energy_direct_intermediate");
            entity.Property(e => e.ActiveEnergyDirectOffpeak)
                .HasPrecision(10, 2)
                .HasColumnName("active_energy_direct_offpeak");
            entity.Property(e => e.ActiveEnergyDirectPeak)
                .HasPrecision(10, 2)
                .HasColumnName("active_energy_direct_peak");
            entity.Property(e => e.ActiveEnergyReverseIntermediate)
                .HasPrecision(10, 2)
                .HasColumnName("active_energy_reverse_intermediate");
            entity.Property(e => e.ActiveEnergyReverseOffpeak)
                .HasPrecision(10, 2)
                .HasColumnName("active_energy_reverse_offpeak");
            entity.Property(e => e.ActiveEnergyReversePeak)
                .HasPrecision(10, 2)
                .HasColumnName("active_energy_reverse_peak");
            entity.Property(e => e.AvgCurrent)
                .HasPrecision(6, 2)
                .HasColumnName("avg_current");
            entity.Property(e => e.AvgVoltage)
                .HasPrecision(6, 2)
                .HasColumnName("avg_voltage");
            entity.Property(e => e.MaxDemand)
                .HasPrecision(10, 2)
                .HasColumnName("max_demand");
            entity.Property(e => e.MeterId).HasColumnName("meter_id");
            entity.Property(e => e.PowerFactor)
                .HasPrecision(5, 2)
                .HasColumnName("power_factor");
            entity.Property(e => e.ReactiveEnergyTotal)
                .HasPrecision(10, 2)
                .HasColumnName("reactive_energy_total");
            entity.Property(e => e.ReadingDate).HasColumnName("reading_date");

            entity.HasOne(d => d.Meter).WithMany(p => p.DailyReadings)
                .HasForeignKey(d => d.MeterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("daily_reading_ibfk_1");
        });

        modelBuilder.Entity<Meter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("meter");

            entity.HasIndex(e => e.ClientId, "client_id");

            entity.HasIndex(e => e.SerialNumber, "serial_number").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ClientId).HasColumnName("client_id");
            entity.Property(e => e.InstallationLocation)
                .HasMaxLength(200)
                .HasColumnName("installation_location");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("is_active");
            entity.Property(e => e.Model)
                .HasMaxLength(50)
                .HasColumnName("model");
            entity.Property(e => e.PhaseType)
                .IsRequired()
                .HasColumnType("enum('single_phase','two_phase','three_phase')")
                .HasColumnName("phase_type");
            entity.Property(e => e.SerialNumber)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("serial_number");

            entity.HasOne(d => d.Client).WithMany(p => p.Meters)
                .HasForeignKey(d => d.ClientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("meter_ibfk_1");
        });

        modelBuilder.Entity<MeterEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("meter_event");

            entity.HasIndex(e => e.MeterId, "meter_id");

            entity.HasIndex(e => e.ReadingId, "reading_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.EventDatetime)
                .HasColumnType("timestamp")
                .HasColumnName("event_datetime");
            entity.Property(e => e.EventType)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("event_type");
            entity.Property(e => e.MeterId).HasColumnName("meter_id");
            entity.Property(e => e.ReadingId).HasColumnName("reading_id");

            entity.HasOne(d => d.Meter).WithMany(p => p.MeterEvents)
                .HasForeignKey(d => d.MeterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("meter_event_ibfk_1");

            entity.HasOne(d => d.Reading).WithMany(p => p.MeterEvents)
                .HasForeignKey(d => d.ReadingId)
                .HasConstraintName("meter_event_ibfk_2");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}